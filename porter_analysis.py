import os
import sys
import threading
import time
from PyPDF2 import PdfReader
from fpdf import FPDF

from langchain_ollama import OllamaLLM
from langchain.prompts import PromptTemplate
import itertools

# === Configuration ===
INPUT_PDF_PATH = os.path.join("pdfs", "document.pdf")
OUTPUT_PDF_PATH = os.path.join("output", "rapport_porter.pdf")
MODEL_NAME = "llama3:instruct"
SPINNER_RUNNING = True

# === Animation spinner ===
def spinner(message="üîÑ G√©n√©ration du rapport..."):
    for c in itertools.cycle(["|", "/", "-", "\\"]):
        if not SPINNER_RUNNING:
            break
        sys.stdout.write(f"\r{message} {c}")
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write("\r‚úÖ Rapport g√©n√©r√© avec succ√®s !       \n")

# === √âtape 1 : Lire le contenu du PDF ===
def read_pdf(file_path):
    reader = PdfReader(file_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text() or ""
    return text.strip()

# === √âtape 2 : G√©n√©rer l‚Äôanalyse Porter ===
def generate_porter_analysis(text, model=MODEL_NAME):
    template = """
    Tu es un expert en strat√©gie d'entreprise. √Ä partir de l'analyse suivante :

    {text}

    G√©n√®re un **rapport structur√©** et bien riche √† partir de data de l'entreprise dont vous avez analysez le document , explicatif, selon le mod√®le des **5 forces de Porter** (concurrence intra sectorielle, menace de nouveaux entrants , pouvoir de n√©gociation des clients , pouvoir des n√©gociation des fournisseurs, produits de substitution ) pour l'entreprise donn√©e dans la dataset, en suivant cette structure exacte :

    ---

    ## 1. Rivalit√© entre concurrents existants  
    Analyse les √©l√©ments suivants :
    - Nombre de concurrents  
    - Diversit√© / diff√©renciation  
    - Part de march√©  
    - Barri√®res de sortie  
    - Co√ªts de changement  
    - Taux de croissance du secteur  

    ---

    ## 2. Menace des nouveaux entrants  
    Analyse les √©l√©ments suivants :  
    - Barri√®res √† l'entr√©e  
    - Co√ªts d‚Äôentr√©e initiaux  
    - Besoin de capitaux / technologie  
    - Acc√®s aux canaux de distribution  
    - R√©putation de marque des acteurs actuels  

    ---

    ## 3. Menace des produits de substitution  
    Analyse les √©l√©ments suivants :  
    - Nombre d'alternatives viables  
    - Co√ªt et facilit√© de substitution  
    - Diff√©renciation per√ßue  
    - Sensibilit√© au prix des clients  

    ---

    ## 4. Pouvoir de n√©gociation des clients  
    Analyse les √©l√©ments suivants :  
    - Nombre de clients  
    - Taille et volume des commandes  
    - Possibilit√© de substitution  
    - Acc√®s √† l'information  
    - Sensibilit√© au prix  

    ---

    ## 5. Pouvoir de n√©gociation des fournisseurs  
    Analyse les √©l√©ments suivants :  
    - Nombre et taille des fournisseurs  
    - Sp√©cificit√© des intrants  
    - Possibilit√© de substitution  
    - Importance du fournisseur  

    ---

    ## Recommandations strat√©giques  
    Sur la base des 5 forces ci-dessus, propose des recommandations concr√®tes et des pistes d'am√©lioration possibles pour :  
    - Renforcer la position concurrentielle  
    - R√©duire les menaces  
    - Cr√©er un avantage comp√©titif durable  
    - Innover ou se diff√©rencier

    R√©ponds uniquement avec un **rapport bien structur√©**, clair, professionnel, et sans reformuler le texte d'entr√©e. N‚Äôajoute rien d‚Äôautre en dehors de ce rapport.
    """

    prompt = PromptTemplate(template=template, input_variables=["text"])
    llm = OllamaLLM(model=model)
    runner = prompt | llm

    global SPINNER_RUNNING
    SPINNER_RUNNING = True
    t = threading.Thread(target=spinner)
    t.start()

    result = runner.invoke({"text": text[:8000]})

    SPINNER_RUNNING = False
    t.join()

    return result  # ‚Üê ici le texte est directement retourn√©

# === √âtape 3 : G√©n√©rer un PDF ===

import unicodedata

def clean_text(text):
    """Nettoie les caract√®res sp√©ciaux pour √©viter les erreurs Unicode dans le PDF."""
    return unicodedata.normalize("NFKD", text).encode("ASCII", "ignore").decode("ASCII")

def create_pdf_report(text, output_path):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    lines = text.split("\n")
    for line in lines:
        pdf.multi_cell(0, 10, clean_text(line))

    pdf.output(output_path)


# === Main ===
if __name__ == "__main__":
    if not os.path.exists(INPUT_PDF_PATH):
        print(f"‚ùå Fichier introuvable : {INPUT_PDF_PATH}")
        exit(1)

    print("üì• Lecture du PDF...")
    text = read_pdf(INPUT_PDF_PATH)

    print("üß† Analyse strat√©gique en cours...")
    analysis = generate_porter_analysis(text)

    print("üìÑ Cr√©ation du fichier PDF...")
    create_pdf_report(analysis, OUTPUT_PDF_PATH)

    print(f"üìÇ Fichier disponible : {OUTPUT_PDF_PATH}")
